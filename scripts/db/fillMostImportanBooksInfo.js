#!/usr/bin/env node

require('dotenv').config()
const fs = require('fs')
const matchSorter = require('match-sorter').default
const requestPromise = require('request-promise')
const Papa = require('papaparse')
const {
  MOST_IMPORTANT_BOOKS_INFO_REVIEWED_CSV,
  MOST_IMPORTANT_BOOKS_INFO_REVIEWED_FILLED_CSV,
} = require('../constants')
const papaPromise = require('./utils/papaParser')
const progressBar = require('../util/progressBar')

const START_INDEX = 0
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY

const allBooks = []
const fillMostImportantbooksInfo = async () => {
  let importantBooks = await papaPromise(MOST_IMPORTANT_BOOKS_INFO_REVIEWED_CSV)
  const pb = progressBar(importantBooks.length)
  for (let i = START_INDEX; i < importantBooks.length; i++) {
    let book = { ...importantBooks[i] }
    if (book.id.includes('autogenerated')) {
      const title = encodeURIComponent(book.title)
      const uri = `https://www.googleapis.com/books/v1/volumes?q=${title}&key=${GOOGLE_API_KEY}`
      try {
        const { items } = await requestPromise({ uri, json: true })
        const googleBooks = items.map(({ id, volumeInfo }) => {
          return {
            ...book,
            // Keeps author and title reviews by hand and update only the following extra info
            id: `BA_${id}`,
            public_id: id,
            summary: volumeInfo.description,
            publication_year: volumeInfo.publishedDate,
            cover_url: `https://books.google.com/books/content?id=${id}&printsec=frontcover&zoom=1&img=1`,
          }
        })
        const bookTitleMatch = matchSorter(googleBooks, book.title, { keys: ['title'] })
        const authorAndTitleMatch = matchSorter(bookTitleMatch, book.author, { keys: ['author'] })
        if (authorAndTitleMatch.length) {
          book = authorAndTitleMatch[0]
        }
      } catch (e) {
        console.log('Error requesting books api for book', book)
      }
    }
    allBooks.push(book)
    const matchedImportantBooksCsv = Papa.unparse(allBooks)
    fs.writeFileSync(MOST_IMPORTANT_BOOKS_INFO_REVIEWED_FILLED_CSV, matchedImportantBooksCsv)
    pb.increment()
  }
  pb.stop()
}

fillMostImportantbooksInfo()
